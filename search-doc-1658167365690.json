[{"title":"About","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"About","url":"docs/intro#getting-started","content":"See the Getting Started page for info on how to start using RemoteState inside your projects. "},{"title":"RemoteStateClient","type":0,"sectionRef":"#","url":"api/RemoteStateClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#properties","content":" "},{"title":"None​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#None","content":"&lt;/&gt; RemoteStateClient.None: None  "},{"title":"Functions​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#functions","content":" "},{"title":"GetState​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#GetState","content":"&lt;/&gt; RemoteStateClient.GetState(stateKey: any) → ClientState Get state. local GameState = RemoteState.GetState(&quot;Game&quot;)   "},{"title":"WaitForState​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#WaitForState","content":"&lt;/&gt; RemoteStateClient.WaitForState(stateKey: any) → Promise Wait for state. RemoteState.WaitForState(&quot;Game&quot;):andThen(function(state) print(state:Get(&quot;Status&quot;)) end)  "},{"title":"RemoteStateServer","type":0,"sectionRef":"#","url":"api/RemoteStateServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#properties","content":" "},{"title":"None​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#None","content":"&lt;/&gt; RemoteStateServer.None: None GameState:Set(&quot;Map&quot;, RemoteState.None)  "},{"title":"Functions​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#new","content":"&lt;/&gt; RemoteStateServer.new( stateKey: any, stateRawData: table ) → ClientState Creates a new state. local GameState = RemoteState.new(&quot;Game&quot;, { Status = &quot;Lobby&quot; })   "},{"title":"GetState​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#GetState","content":"&lt;/&gt; RemoteStateServer.GetState(stateKey: any) → ClientState Get state. local GameState = RemoteState.GetState(&quot;Game&quot;)   "},{"title":"WaitForState​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#WaitForState","content":"&lt;/&gt; RemoteStateServer.WaitForState(stateKey: any) → Promise Wait for state. RemoteState.WaitForState(&quot;Game&quot;):andThen(function(state) print(state:Get(&quot;Status&quot;)) end)  "},{"title":"ServerState","type":0,"sectionRef":"#","url":"api/ServerState","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ServerState","url":"api/ServerState#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Changed","content":"&lt;/&gt; ServerState.Changed: Signal local GameState = RemoteState.GetState(&quot;Game&quot;) GameState.Changed:Connect(function(key, newValue, oldValue) print(key .. &quot; was changed&quot;) print(newValue .. &quot; is the new value&quot;) print(oldValue .. &quot; was the old value&quot;) end)  "},{"title":"Functions​","type":1,"pageTitle":"ServerState","url":"api/ServerState#functions","content":" "},{"title":"Set​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Set","content":"&lt;/&gt; ServerState:Set( key: any, value: any ) → any Set value in state. GameState:Set(&quot;Status&quot;, &quot;InGame&quot;)   "},{"title":"SetState​","type":1,"pageTitle":"ServerState","url":"api/ServerState#SetState","content":"&lt;/&gt; ServerState:SetState(newData: array) → () Set multiple values in state. GameState:SetState({ Status = &quot;InGame&quot;, Gamemode = &quot;Swordfight&quot; })   "},{"title":"Increment​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Increment","content":"&lt;/&gt; ServerState:Increment( key: any, increment: number ) → number Increment a value in state. local pointsAvailable = GameState:Increment(&quot;PointsAvailable&quot;, 69)   "},{"title":"Decrement​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Decrement","content":"&lt;/&gt; ServerState:Decrement( key: any, decrement: number ) → number Decrement a value in state. local pointsAvailable = GameState:Decrement(&quot;PointsAvailable&quot;, 69)   "},{"title":"Toggle​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Toggle","content":"&lt;/&gt; ServerState:Toggle(key: any) → boolean Toggle a value in state. local isPlaying = GameState:Toggle(&quot;Playing&quot;)   "},{"title":"Get​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Get","content":"&lt;/&gt; ServerState:Get(key: any) → any Get value from state. local gameStatus = GameState:Get(&quot;Status&quot;) print(&quot;The current game status is &quot; .. gameStatus)   "},{"title":"GetState​","type":1,"pageTitle":"ServerState","url":"api/ServerState#GetState","content":"&lt;/&gt; ServerState:GetState() → array Get all values from state. local gameData = GameState:GetState() print(gameData)   "},{"title":"GetChangedSignal​","type":1,"pageTitle":"ServerState","url":"api/ServerState#GetChangedSignal","content":"&lt;/&gt; ServerState:GetChangedSignal(key: any) → Signal Get the changed signal of a value within a state. GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status) print(&quot;The game's new status is &quot; .. status) end)   "},{"title":"Reset​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Reset","content":"&lt;/&gt; ServerState:Reset() → () Reset the state to its initial data. wait(30) print(&quot;Game over!&quot;) GameState:Reset()   "},{"title":"Destroy​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Destroy","content":"&lt;/&gt; ServerState:Destroy() → () Disconnects all connections to signals within state. note ClientState:Destroy() will be called on the given state. "},{"title":"Examples","type":0,"sectionRef":"#","url":"docs/examples","content":"","keywords":""},{"title":"Door​","type":1,"pageTitle":"Examples","url":"docs/examples#door","content":"Our first example is of a door, a really basic one. This example shows how a states key can be a instance rather than a string. When we create each and every doors state in local DoorState = RemoteState.new(doorInstance, {Open = false}), we pass doorInstance as the states key. This creates a unique state key for each door. Server local CollectionService = game:GetService(&quot;CollectionService&quot;) local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local function HandleDoor(doorInstance) local DoorState = RemoteState.new(doorInstance, { Open = false }) doorInstance.Door.ClickDetector.MouseClick:Connect(function() --Every time the door is clicked, toggle the open value DoorState:Toggle(&quot;Open&quot;) end) end local doorTag = &quot;Door&quot; for _, doorInstance in pairs(CollectionService:GetTagged(doorTag)) do HandleDoor(doorInstance) end CollectionService:GetInstanceAddedSignal(doorTag):Connect(function(doorInstance) HandleDoor(doorInstance) end)  Client local CollectionService = game:GetService(&quot;CollectionService&quot;) local TweenService = game:GetService(&quot;TweenService&quot;) local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local function HandleDoor(doorInstance) local retrievedDoorState, DoorState = RemoteState.WaitForState(doorInstance):await() local function ToggleDoor(isOpen) task.spawn(function() --Prevent yielding if isOpen then local openTween = TweenService:Create(doorInstance:WaitForChild(&quot;Door&quot;), TweenInfo.new(0.5), {Transparency = 0.5}) openTween:Play() openTween.Completed:Wait() --Wait for the door to open doorInstance:WaitForChild(&quot;Door&quot;).CanCollide = false else local closeTween = TweenService:Create(doorInstance:WaitForChild(&quot;Door&quot;), TweenInfo.new(0.5), {Transparency = 0}) closeTween:Play() closeTween.Completed:Wait() --Wait for the door to open doorInstance:WaitForChild(&quot;Door&quot;).CanCollide = true end end) end ToggleDoor(DoorState:Get(&quot;Open&quot;)) DoorState:GetChangedSignal(&quot;Open&quot;):Connect(function(isOpen) --We want to call every time the Open value changes ToggleDoor(isOpen) end) end local doorTag = &quot;Door&quot; for _, doorInstance in pairs(CollectionService:GetTagged(doorTag)) do HandleDoor(doorInstance) end CollectionService:GetInstanceAddedSignal(doorTag):Connect(function(doorInstance) HandleDoor(doorInstance) end)  "},{"title":"None","type":0,"sectionRef":"#","url":"api/None","content":"On this page None Placeholder for the value nil. GameState:Set(&quot;Map&quot;, RemoteState.None) Returns nil.","keywords":""},{"title":"ClientState","type":0,"sectionRef":"#","url":"api/ClientState","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ClientState","url":"api/ClientState#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Changed","content":"&lt;/&gt; ClientState.Changed: Signal local GameState = RemoteState.GetState(&quot;Game&quot;) GameState.Changed:Connect(function(key, newValue, oldValue) print(key .. &quot; was changed&quot;) print(newValue .. &quot; is the new value&quot;) print(oldValue .. &quot; was the old value&quot;) end)  "},{"title":"Functions​","type":1,"pageTitle":"ClientState","url":"api/ClientState#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Get","content":"&lt;/&gt; ClientState:Get(key: any) → any Get value from state. local gameStatus = GameState:Get(&quot;Status&quot;) print(&quot;The current game status is &quot; .. gameStatus)   "},{"title":"GetState​","type":1,"pageTitle":"ClientState","url":"api/ClientState#GetState","content":"&lt;/&gt; ClientState:GetState() → array Get all values from state. local gameData = GameState:GetState() print(gameData)   "},{"title":"GetChangedSignal​","type":1,"pageTitle":"ClientState","url":"api/ClientState#GetChangedSignal","content":"&lt;/&gt; ClientState:GetChangedSignal(key: any) → Signal Get the changed signal of a value within a state. GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status, oldStatus, key) print(&quot;The game's new status is &quot; .. status) print(&quot;The game's old status was &quot; .. oldStatus) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Destroy","content":"&lt;/&gt; ClientState:Destroy() → () Disconnects all signals within state. note ClientState:Destroy() does not affect the ServerState. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/gettingstarted","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#installation","content":"To start using RemoteState, you must first install it. You can download RemoteState through the Github Releases page or on the Roblox Library page. "},{"title":"Rojo workflow​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#rojo-workflow","content":"Download the .rbmx release file from the Github Releases page and place it inside your designated packages folder. "},{"title":"Roblox workflow​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#roblox-workflow","content":"Download the module from the Roblox Library and place the module inside ReplicatedStorage. "},{"title":"Creating a state​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#creating-a-state","content":"Imagine this is some sort of round based game. Lets start of by making some sort of a game state. This game state will describe what the games status is (Intermission or InGame), and, if the game has started, the state will describe what the gamemode and the map are. Server local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local GameState = RemoteState.new(&quot;Game&quot;, { Status = &quot;Intermission&quot;, Gamemode = RemoteState.None, Map = RemoteState.None })  Okay, so now that we have created the state on the Server side, we must retrieve it on the Client side. "},{"title":"Getting a state​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#getting-a-state","content":"Client local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local retrievedGameState, GameState = RemoteState.WaitForState(&quot;Game&quot;):await()  As you see, I used the &quot;WaitForState&quot; function. This is just a &quot;safety&quot; feature to ensure that the client retrieves the game state. Next, we need to create some sort of a loop that changes the game state (on the Server side). "},{"title":"Manipulating a state​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#manipulating-a-state","content":"Server local intermissionTime = 10 local gameTime = 60 while true do wait(intermissionTime) --Intermission has ended GameState:SetState({ Status = &quot;GamePlaying&quot;, GameMode = &quot;Classic&quot;, Map = &quot;AMap&quot; }) wait(gameTime) --The game has ended, lets reset the state back to its initial data. GameState:Reset() end  Okay, thats pretty much a basic game loop. Now, on the client, lets handle these state changes. "},{"title":"Handling state changes​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#handling-state-changes","content":"We manipulated the state on the server, but now we need to respond to these changes on the client side. Client --Lets watch the state change GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status) if status == &quot;Intermission&quot; then print(&quot;The game is in intermission&quot;) elseif status == &quot;GamePlaying&quot; then --We can use the state:Get() function to get the gamemode and map print(&quot;We are in a game, the gamemode is &quot; .. GameState:Get(&quot;GameMode&quot;) .. &quot; and the map is &quot; .. GameState:Get(&quot;Map&quot;)) end end)  "},{"title":"Final Code​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#final-code","content":"Well... that's pretty much it! Final Server Code local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local GameState = RemoteState.new(&quot;Game&quot;, { Status = &quot;Intermission&quot;, Gamemode = RemoteState.None, Map = RemoteState.None }) local intermissionTime = 10 local roundTime = 60 while true do wait(intermissionTime) --Intermission has ended GameState:SetState({ Status = &quot;GamePlaying&quot;, GameMode = &quot;Classic&quot;, Map = &quot;AMap&quot; }) wait(roundTime) --The round has ended GameState:Reset() --Lets reset the state back to its initial data. end  Final Client Code local RemoteState = require(game:GetService(&quot;ReplicatedStorage&quot;).RemoteState) local retrievedGameState, GameState = RemoteState.WaitForState(&quot;Game&quot;):await() --Lets watch the state change GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status) if status == &quot;Intermission&quot; then print(&quot;The game is in intermission&quot;) elseif status == &quot;GamePlaying&quot; then --We can use the state:Get() function to get the gamemode and map print(&quot;We are in a game, the gamemode is &quot; .. GameState:Get(&quot;GameMode&quot;) .. &quot; and the map is &quot; .. GameState:Get(&quot;Map&quot;)) end end)  "}]