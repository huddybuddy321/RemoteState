[{"title":"About","type":0,"sectionRef":"#","url":"docs/intro","content":"About Hey","keywords":""},{"title":"RemoteStateServer","type":0,"sectionRef":"#","url":"api/RemoteStateServer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#new","content":"&lt;/&gt; RemoteStateServer.new( stateKey: any, stateRawData: table ) → ClientState Creates a new state local GameState = RemoteState.new(&quot;Game&quot;, { Status = &quot;Lobby&quot; })   "},{"title":"GetState​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#GetState","content":"&lt;/&gt; RemoteStateServer.GetState(stateKey: any) → ClientState Get state local GameState = RemoteState.GetState(&quot;Game&quot;)   "},{"title":"WaitForState​","type":1,"pageTitle":"RemoteStateServer","url":"api/RemoteStateServer#WaitForState","content":"&lt;/&gt; RemoteStateServer.WaitForState(stateKey: any) → Promise Wait for state RemoteState.WaitForState(&quot;Game&quot;):andThen(function(state) print(state:Get(&quot;Status&quot;)) end)  "},{"title":"RemoteStateClient","type":0,"sectionRef":"#","url":"api/RemoteStateClient","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#functions","content":" "},{"title":"GetState​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#GetState","content":"&lt;/&gt; RemoteStateClient.GetState(stateKey: any) → ClientState Get state local GameState = RemoteState.GetState(&quot;Game&quot;)   "},{"title":"WaitForState​","type":1,"pageTitle":"RemoteStateClient","url":"api/RemoteStateClient#WaitForState","content":"&lt;/&gt; RemoteStateClient.WaitForState(stateKey: any) → Promise Wait for state RemoteState.WaitForState(&quot;Game&quot;):andThen(function(state) print(state:Get(&quot;Status&quot;)) end)  "},{"title":"ClientState","type":0,"sectionRef":"#","url":"api/ClientState","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ClientState","url":"api/ClientState#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Changed","content":"&lt;/&gt; ClientState.Changed: Signal local GameState = RemoteState.GetState(&quot;Game&quot;) GameState.Changed:Connect(function(key, newValue, oldValue) print(key .. &quot; was changed&quot;) print(newValue .. &quot; is the new value&quot;) print(oldValue .. &quot; was the old value&quot;) end)  "},{"title":"Functions​","type":1,"pageTitle":"ClientState","url":"api/ClientState#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Get","content":"&lt;/&gt; ClientState:Get(key: any) → any Get value from state local gameStatus = GameState:Get(&quot;Status&quot;) print(&quot;The current game status is &quot; .. gameStatus)   "},{"title":"GetState​","type":1,"pageTitle":"ClientState","url":"api/ClientState#GetState","content":"&lt;/&gt; ClientState:GetState() → array Get all values from state local gameData = GameState:GetState() print(gameData)   "},{"title":"GetChangedSignal​","type":1,"pageTitle":"ClientState","url":"api/ClientState#GetChangedSignal","content":"&lt;/&gt; ClientState:GetChangedSignal(key: any) → Signal Get the changed signal of a value within a state GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status) print(&quot;The game's new status is &quot; .. status) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ClientState","url":"api/ClientState#Destroy","content":"&lt;/&gt; ClientState:Destroy() → () Disconnects all signals within state GameState:Destroy()  "},{"title":"ServerState","type":0,"sectionRef":"#","url":"api/ServerState","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerState","url":"api/ServerState#functions","content":" "},{"title":"Set​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Set","content":"&lt;/&gt; ServerState:Set( key: any, value: any ) → () Set value in state GameState:Set(&quot;Status&quot;, &quot;InGame&quot;)   "},{"title":"SetState​","type":1,"pageTitle":"ServerState","url":"api/ServerState#SetState","content":"&lt;/&gt; ServerState:SetState(newData: array) → () Set multiple values in state GameState:SetState({ Status = &quot;InGame&quot;, Gamemode = &quot;Swordfight&quot; })   "},{"title":"Increment​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Increment","content":"&lt;/&gt; ServerState:Increment( key: any, increment: number ) → () Increment a value in state. GameState:Increment(&quot;PointsAvailable&quot;, 5)   "},{"title":"Decrement​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Decrement","content":"&lt;/&gt; ServerState:Decrement( key: any, decrement: number ) → () Decrement a value in state. GameState:Decrement(&quot;PointsAvailable&quot;, 69)   "},{"title":"Get​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Get","content":"&lt;/&gt; ServerState:Get(key: any) → any Get value from state local gameStatus = GameState:Get(&quot;Status&quot;) print(&quot;The current game status is &quot; .. gameStatus)   "},{"title":"GetState​","type":1,"pageTitle":"ServerState","url":"api/ServerState#GetState","content":"&lt;/&gt; ServerState:GetState() → array Get all values from state local gameData = GameState:GetState() print(gameData)   "},{"title":"GetChangedSignal​","type":1,"pageTitle":"ServerState","url":"api/ServerState#GetChangedSignal","content":"&lt;/&gt; ServerState:GetChangedSignal(key: any) → Signal Get the changed signal of a value within a state GameState:GetChangedSignal(&quot;Status&quot;):Connect(function(status) print(&quot;The game's new status is &quot; .. status) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ServerState","url":"api/ServerState#Destroy","content":"&lt;/&gt; ServerState:Destroy() → () Disconnects all signals within state GameState:Destroy()  "}]