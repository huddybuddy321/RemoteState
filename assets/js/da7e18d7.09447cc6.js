"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[391],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(a),c=r,g=p["".concat(s,".").concat(c)]||p[c]||u[c]||o;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},85787:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:2},i="Getting Started",l={unversionedId:"gettingstarted",id:"gettingstarted",title:"Getting Started",description:"Installation",source:"@site/docs/gettingstarted.md",sourceDirName:".",slug:"/gettingstarted",permalink:"/RemoteState/docs/gettingstarted",draft:!1,editUrl:"https://github.com/huddybuddy321/RemoteState/edit/master/docs/gettingstarted.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"About",permalink:"/RemoteState/docs/intro"},next:{title:"Examples",permalink:"/RemoteState/docs/examples"}},s={},m=[{value:"Installation",id:"installation",level:2},{value:"Rojo workflow",id:"rojo-workflow",level:3},{value:"Roblox workflow",id:"roblox-workflow",level:3},{value:"Creating a state",id:"creating-a-state",level:2},{value:"Getting a state",id:"getting-a-state",level:2},{value:"Manipulating a state",id:"manipulating-a-state",level:2},{value:"Handling state changes",id:"handling-state-changes",level:2},{value:"Final Code",id:"final-code",level:2}],d={toc:m};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"To start using RemoteState, you must first install it."),(0,r.kt)("p",null,"You can download RemoteState through the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/huddybuddy321/RemoteState/releases"},"Github Releases")," page or on the ",(0,r.kt)("a",{parentName:"p",href:"https://www.roblox.com/library/10224464689/Remote-State"},"Roblox Library")," page."),(0,r.kt)("h3",{id:"rojo-workflow"},"Rojo workflow"),(0,r.kt)("p",null,"Download the .rbmx release file from the Github Releases page and place it inside your designated packages folder."),(0,r.kt)("h3",{id:"roblox-workflow"},"Roblox workflow"),(0,r.kt)("p",null,"Download the module from the Roblox Library and place the module inside ReplicatedStorage."),(0,r.kt)("h2",{id:"creating-a-state"},"Creating a state"),(0,r.kt)("p",null,"Imagine this is some sort of round based game."),(0,r.kt)("p",null,"Lets start of by making some sort of a game state."),(0,r.kt)("p",null,"This game state will describe what the games status is (Intermission or InGame), and, if the game has started, the state will describe what the gamemode and the map are."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal GameState = RemoteState.new("Game", {\n    Status = "Intermission",\n    Gamemode = RemoteState.None,\n    Map = RemoteState.None\n})\n')),(0,r.kt)("p",null,"Okay, so now that we have created the state on the Server side, we must retrieve it on the Client side."),(0,r.kt)("h2",{id:"getting-a-state"},"Getting a state"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Client")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal retrievedGameState, GameState = RemoteState.WaitForState("Game"):await()\n')),(0,r.kt)("p",null,'As you see, I used the "WaitForState" function. This is just a "safety" feature to ensure that the client retrieves the game state.'),(0,r.kt)("p",null,"Next, we need to create some sort of a loop that changes the game state (on the Server side)."),(0,r.kt)("h2",{id:"manipulating-a-state"},"Manipulating a state"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local intermissionTime = 10\nlocal gameTime = 60\n\nwhile true do\n    wait(intermissionTime)\n    --Intermission has ended\n\n    GameState:SetState({\n        Status = "GamePlaying",\n        GameMode = "Classic",\n        Map = "AMap"\n    })\n\n    wait(gameTime)\n    --The game has ended, lets reset the state back to its initial data.\n\n    GameState:Reset()\nend\n')),(0,r.kt)("p",null,"Okay, thats pretty much a basic game loop."),(0,r.kt)("p",null,"Now, on the client, lets handle these state changes."),(0,r.kt)("h2",{id:"handling-state-changes"},"Handling state changes"),(0,r.kt)("p",null,"We manipulated the state on the server, but now we need to respond to these changes on the client side."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Client")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'--Lets watch the state change\nGameState:GetChangedSignal("Status"):Connect(function(status)\n    if status == "Intermission" then\n        print("The game is in intermission")\n    elseif status == "GamePlaying" then\n        --We can use the state:Get() function to get the gamemode and map\n        print("We are in a game, the gamemode is " .. GameState:Get("GameMode") .. " and the map is " .. GameState:Get("Map"))\n    end\nend)\n')),(0,r.kt)("h2",{id:"final-code"},"Final Code"),(0,r.kt)("p",null,"Well... that's pretty much it!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Final Server Code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal GameState = RemoteState.new("Game", {\n    Status = "Intermission",\n    Gamemode = RemoteState.None,\n    Map = RemoteState.None\n})\n\nlocal intermissionTime = 10\nlocal roundTime = 60\n\nwhile true do\n    wait(intermissionTime)\n    --Intermission has ended\n\n    GameState:SetState({\n        Status = "GamePlaying",\n        GameMode = "Classic",\n        Map = "AMap"\n    })\n\n    wait(roundTime)\n    --The round has ended\n\n    GameState:Reset() --Lets reset the state back to its initial data.\nend\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Final Client Code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal retrievedGameState, GameState = RemoteState.WaitForState("Game"):await()\n\n--Lets watch the state change\nGameState:GetChangedSignal("Status"):Connect(function(status)\n    if status == "Intermission" then\n        print("The game is in intermission")\n    elseif status == "GamePlaying" then\n        --We can use the state:Get() function to get the gamemode and map\n        print("We are in a game, the gamemode is " .. GameState:Get("GameMode") .. " and the map is " .. GameState:Get("Map"))\n    end\nend)\n')))}u.isMDXComponent=!0}}]);