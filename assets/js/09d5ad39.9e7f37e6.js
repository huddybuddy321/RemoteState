"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),s=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return o.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return t?o.createElement(f,l(l({ref:n},d),{},{components:t})):o.createElement(f,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<a;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},84381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_position:3},l="Examples",c={unversionedId:"examples",id:"examples",title:"Examples",description:"Door",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/RemoteState/docs/examples",draft:!1,editUrl:"https://github.com/huddybuddy321/RemoteState/edit/master/docs/examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/RemoteState/docs/gettingstarted"}},i={},s=[{value:"Door",id:"door",level:2}],d={toc:s};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"door"},"Door"),(0,r.kt)("p",null,"Our first example is of a door, a really basic one. This example shows how a states key can be a instance rather than a string."),(0,r.kt)("p",null,"When we create each and every doors state in ",(0,r.kt)("inlineCode",{parentName:"p"},"local DoorState = RemoteState.new(doorInstance, {Open = false})"),", we pass ",(0,r.kt)("inlineCode",{parentName:"p"},"doorInstance")," as the states key. This creates a unique state key for each door."),(0,r.kt)("h1",{id:"server"},"Server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local CollectionService = game:GetService("CollectionService")\nlocal RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal function HandleDoor(doorInstance)\n    local DoorState = RemoteState.new(doorInstance, {\n        Open = false\n    })\n\n    doorInstance.Door.ClickDetector.MouseClick:Connect(function()\n        --Every time the door is clicked, toggle the open value\n        DoorState:Toggle("Open")\n    end)\nend\n\nlocal doorTag = "Door"\n\nfor _, doorInstance in pairs(CollectionService:GetTagged(doorTag)) do\n    HandleDoor(doorInstance)\nend\n\nCollectionService:GetInstanceAddedSignal(doorTag):Connect(function(doorInstance)\n    HandleDoor(doorInstance)\nend)\n')),(0,r.kt)("h1",{id:"client"},"Client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local CollectionService = game:GetService("CollectionService")\nlocal TweenService = game:GetService("TweenService")\nlocal RemoteState = require(game:GetService("ReplicatedStorage").RemoteState)\n\nlocal function HandleDoor(doorInstance)\n    local retrievedDoorState, DoorState = RemoteState.WaitForState(doorInstance):await()\n\n    local function ToggleDoor(isOpen)\n        task.spawn(function() --Prevent yielding\n            if isOpen then\n                local openTween = TweenService:Create(doorInstance:WaitForChild("Door"), TweenInfo.new(0.5), {Transparency = 0.5})\n                openTween:Play()\n\n                openTween.Completed:Wait() --Wait for the door to open\n\n                doorInstance:WaitForChild("Door").CanCollide = false\n            else\n                local closeTween = TweenService:Create(doorInstance:WaitForChild("Door"), TweenInfo.new(0.5), {Transparency = 0})\n                closeTween:Play()\n\n                closeTween.Completed:Wait() --Wait for the door to open\n\n                doorInstance:WaitForChild("Door").CanCollide = true\n            end\n        end)\n    end\n\n    ToggleDoor(DoorState:Get("Open"))\n\n    DoorState:GetChangedSignal("Open"):Connect(function(isOpen)\n        --We want to call every time the Open value changes\n        ToggleDoor(isOpen)\n    end)\nend\n\nlocal doorTag = "Door"\n\nfor _, doorInstance in pairs(CollectionService:GetTagged(doorTag)) do\n    HandleDoor(doorInstance)\nend\n\nCollectionService:GetInstanceAddedSignal(doorTag):Connect(function(doorInstance)\n    HandleDoor(doorInstance)\nend)\n')))}p.isMDXComponent=!0}}]);