"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[294],{45080:e=>{e.exports=JSON.parse('{"functions":[{"name":"Get","desc":"Get value from state.\\n\\n\\n```lua\\nlocal gameStatus = GameState:Get(\\"Status\\")\\nprint(\\"The current game status is \\" .. gameStatus)\\n```","params":[{"name":"key","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":174,"path":"src/RemoteStateClient.lua"}},{"name":"GetState","desc":"Get all values from state.\\n\\n\\n```lua\\nlocal gameData = GameState:GetState()\\nprint(gameData)\\n```","params":[],"returns":[{"desc":"","lua_type":"array"}],"function_type":"method","source":{"line":199,"path":"src/RemoteStateClient.lua"}},{"name":"GetChangedSignal","desc":"Get the changed signal of a value within a state.\\n\\n\\n```lua\\nGameState:GetChangedSignal(\\"Status\\"):Connect(function(status, oldStatus, key)\\n    print(\\"The game\'s new status is \\" .. status)\\n    print(\\"The game\'s old status was \\" .. oldStatus)\\nend)\\n```","params":[{"name":"key","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":230,"path":"src/RemoteStateClient.lua"}},{"name":"Destroy","desc":"Disconnects all signals within state.\\n\\n:::note\\n`ClientState:Destroy()` does not affect the ServerState.\\n:::","params":[],"returns":[],"function_type":"method","source":{"line":249,"path":"src/RemoteStateClient.lua"}}],"properties":[{"name":"Changed","desc":"```lua\\nlocal GameState = RemoteState.GetState(\\"Game\\")\\nGameState.Changed:Connect(function(key, newValue, oldValue)\\n    print(key .. \\" was changed\\")\\n    print(newValue .. \\" is the new value\\")\\n    print(oldValue .. \\" was the old value\\")\\nend)\\n```","lua_type":"Signal","source":{"line":84,"path":"src/RemoteStateClient.lua"}}],"types":[],"name":"ClientState","desc":"ClientState.","source":{"line":69,"path":"src/RemoteStateClient.lua"}}')}}]);